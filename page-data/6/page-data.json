{"componentChunkName":"component---src-templates-pagination-js","path":"/6/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"allMarkdownRemark":{"nodes":[{"excerpt":"의도 부분과 전체의 계층을 표현하기 위해 객체들을 트리 구조로 구성한다. 사용자는 기본 객체와 복합 객체(컴포지트 객체)를 동일하게 다룰 수 있게 된다. UML  추상 클래스 Component를 정의한다. 추상 클래스 내에는 다른 Component…","fields":{"slug":"/design-patterns/컴포지트-패턴/"},"frontmatter":{"date":"July 25, 2023","title":"컴포지트 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 구체적인 구현을 가진 클래스에서 추상적 요소를 분리하여 다양성을 가질 수 있도록 설계한다. UML…","fields":{"slug":"/design-patterns/브릿지-패턴/"},"frontmatter":{"date":"July 24, 2023","title":"브릿지 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 클래스의 인터페이스를 사용자가 기대하는 인터페이스로 적응(Adapt)시킨다. 클래스 어댑터(상속을 통해 구현) UML  Target 클래스에 메서드를 정의하는데, 추상 클래스의 서브 클래스에서 Adaptee…","fields":{"slug":"/design-patterns/어댑터-패턴/"},"frontmatter":{"date":"July 23, 2023","title":"어댑터 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 오직 한 개의 클래스 인스턴스만을 갖도록 하고 그 인스턴스를 전역적으로 접근할 수 있게 한다. UML  싱글턴 클래스는 자기 자신을 으로 제공한다. 외부에서 싱글턴 클래스에 접근하기 위해서는 static…","fields":{"slug":"/design-patterns/싱글턴-패턴/"},"frontmatter":{"date":"July 22, 2023","title":"싱글턴 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 프로토타입이 되는 인스턴스를 사용하여 생성할 객체의 종류를 명시하고, 이렇게 만든 견본을 복사하여 새로운 객체를 생성한다. UML…","fields":{"slug":"/design-patterns/프로토타입-패턴/"},"frontmatter":{"date":"July 21, 2023","title":"프로토타입 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할 지에 대한 결정은 서브 클래스가 내리도록 한다. UML…","fields":{"slug":"/design-patterns/팩토리-메서드-패턴/"},"frontmatter":{"date":"July 19, 2023","title":"팩토리 메서드 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 복잡한 객체를 생성하는 방법을 표현하는 방법을 정의한 클래스로부터 분리하여, 서로 다른 객체를 생성할 때 동일한 과정을 통해 생성하도록 한다. UML…","fields":{"slug":"/design-patterns/빌더-패턴/"},"frontmatter":{"date":"July 18, 2023","title":"빌더 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"문제 유니티로 게임을 개발하기 위해 스크립트를 짜고 있었다. 리스트에 들어있는 인스턴스와 다른 인스턴스를 교환(swap…","fields":{"slug":"/csharp/Csharp에서-데이터-swap하기/"},"frontmatter":{"date":"July 17, 2023","title":"Csharp에서 데이터 swap하기","description":"ref키워드를 이용해 값을 교환하는 방법에 대해 공부한 글입니다.","tags":["csharp"]}},{"excerpt":"CTS C#의 모든 형식은 기본 형식에서 파생된 또는 상속된 형식이다. 모든 형식은 로부터 파생된다. 이렇게 기본 형식에서 파생되는 구조를 공용 형식 시스템(Common Type System)이라고 한다. 형식 CTS의 모든 형식은 Value…","fields":{"slug":"/csharp/Csharp의-형식/"},"frontmatter":{"date":"July 17, 2023","title":"Csharp의 형식","description":"값 형식과 참조 형식의 차이점을 알기 위해 공부한 글입니다.","tags":["csharp"]}},{"excerpt":"의도 서로 관련성이 있거나 독립적인 여러 객체의 집합을 생성하기 위한 인터페이스를 제공한다. UML  사용자는 추상 팩토리를 통해 A와 B…","fields":{"slug":"/design-patterns/추상-팩토리-패턴/"},"frontmatter":{"date":"July 16, 2023","title":"추상 팩토리 패턴","description":"GoF의 디자인 패턴이라는 책에 소개된 추상 팩토리 패턴에 대해 정리한 글입니다.","tags":["design-pattern"]}}]}},"pageContext":{"limit":10,"skip":50,"currentPage":6,"numPagination":5,"paginationPageCount":7}},"staticQueryHashes":["1846574571","230163734","3589320610"],"slicesMap":{}}