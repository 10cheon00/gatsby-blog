{"componentChunkName":"component---src-templates-blog-post-js","path":"/til/24-2-21-Spring-Dependency-Injection/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"markdownRemark":{"id":"b8da71c8-9a12-569c-b112-4da3aed2d8e4","excerpt":"DIP Dependency Inversion Principle, 의존성 주입 원칙은 SOLID 원칙 중 마지막에 속하는 원칙이다. 의존성 역전 원칙에서 말하는, 유연성이 극대화된 시스템이란 소스 코드 의존성이 추상에 의존하며 구체에는 의존하지 않는 시스템이다. (클린 아키텍처, 92p…","html":"<h1 id=\"dip\" style=\"position:relative;\"><a href=\"#dip\" aria-label=\"dip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>DIP</h1>\n<p>Dependency Inversion Principle, 의존성 주입 원칙은 SOLID 원칙 중 마지막에 속하는 원칙이다.</p>\n<blockquote>\n<p>의존성 역전 원칙에서 말하는, 유연성이 극대화된 시스템이란 소스 코드 의존성이 추상에 의존하며 구체에는 의존하지 않는 시스템이다. (클린 아키텍처, 92p)</p>\n</blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\">위키피디아</a>에서는 이렇게 정의하고 있다.</p>\n<ul>\n<li>\n<p>High-level modules should not import anything from low-level modules. Both should depend on abstractions (e.g., interfaces).</p>\n<blockquote>\n<p>상위 모듈은 그 어떤 하위 모듈에도 의존하면 안된다. 상위 모듈과 하위 모듈은 모두 추상화에 의존해야한다.</p>\n</blockquote>\n</li>\n<li>\n<p>Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</p>\n<blockquote>\n<p>추상화는 세부 사항에 의존해선 안되며 세부 사항(구체)이 추상화에 의존해야한다.</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"dependency-injection\" style=\"position:relative;\"><a href=\"#dependency-injection\" aria-label=\"dependency injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Dependency Injection</h1>\n<p>위에서 얘기했듯 구체는 추상화에 의존해야한다. 전통적으로 객체는 자신이 필요로 하는 의존성 구체를 직접 생성하여 사용했다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">I</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">I</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">I</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 필요로 하는 의존성 구체를 직접 생성했다.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 구체를 직접 생성하다보니 아래와 같은 문제가 생겼다.</p>\n<ul>\n<li>How can a class be independent from the creation of the objects it depends on?</li>\n<li>How can an application, and the objects it uses support different configurations?</li>\n</ul>\n<p>분명 인터페이스를 사용하여 추상화에 의존하도록 했지만 결국 <strong>객체는 구체를 직접 생성해야하는 책임을 갖게 되었고</strong>, 인터페이스를 사용하여 다형성을 갖도록 구현했지만 <strong>의존성을 변경하려면 모든 객체를 직접 수정해야하는 작업</strong>을 요구하게 되었다.</p>\n<p>따라서 구체를 생성하는 책임을 분리하는 것이 <strong>Dependency Injection</strong>이다. 외부에서 의존성을 주입하는 것이다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">I</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">I</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">I</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dependency injection</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클래스의 생성자에 의존성을 가지는 추상화를 명시하고, 외부에서 구체를 주입해준다. 이렇게 하면 예시의 클래스 <code class=\"language-text\">B</code>는 자신이 요구하는 <code class=\"language-text\">I</code> 타입 구체들을 생성할 책임이 없을 뿐더러 생성 과정에 대해서 몰라도 된다.</p>\n<p>외부에서 의존성을 주입하는 방법은 크게 세 가지인데, 생성자를 이용하는 방법, setter를 이용하는 방법, interface를 이용하는 방법이 있다.</p>\n<blockquote>\n<p>마지막 방법은 그다지 친숙하지 않고, Spring에서 활용하지 않아 생략했다.</p>\n</blockquote>\n<h2 id=\"constructor-based-injection\" style=\"position:relative;\"><a href=\"#constructor-based-injection\" aria-label=\"constructor based injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Constructor-based Injection</h2>\n<p>위에서 보았듯이 생성자를 통해 의존성을 주입한다.</p>\n<p>생성자를 통해 객체를 생성하게 되면 <em>모든 의존성이 주입된 상태</em>가 된다.</p>\n<p>만약 의존성이 엄청 많은 클래스라면 생성자의 인자 또한 비례하여 늘어나게 된다. 그 때에는 클래스를 분리해야할지 검토해야한다.</p>\n<h2 id=\"setter-based-injection\" style=\"position:relative;\"><a href=\"#setter-based-injection\" aria-label=\"setter based injection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Setter-based Injection</h2>\n<p>setter를 이용하여 의존성을 주입한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">I</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">I</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">I</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setI</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token punctuation\">.</span><span class=\"token function\">setI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// setter-based injection</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성 시기에는 의존성이 주입되어 있지 않으므로 Null check를 해야한다. 런타임에 의존성이 변경되어야 한다면 이런 방법을 사용해야한다.</p>\n<h1 id=\"spring-bean-등록\" style=\"position:relative;\"><a href=\"#spring-bean-%EB%93%B1%EB%A1%9D\" aria-label=\"spring bean 등록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Spring Bean 등록</h1>\n<p>Spring은 Bean 객체를 통해 의존성을 주입한다. IoC 컨테이너가 Bean 객체를 관리하며 의존성이 필요할 때에는 적절한 Bean 객체를 찾아 주입시킨다.</p>\n<p>따라서 Bean 객체를 등록하고, <code class=\"language-text\">@Autowired</code> 어노테이션을 통해 의존성을 주입해야한다고 명시하면 IoC 컨테이너가 런타임에 의존성을 주입시킨다.</p>\n<h2 id=\"configuration--bean\" style=\"position:relative;\"><a href=\"#configuration--bean\" aria-label=\"configuration  bean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a><code class=\"language-text\">@Configuration</code> &#x26; <code class=\"language-text\">@Bean</code></h2>\n<p>별도의 설정 클래스를 작성하여 Bean 객체를 등록하는 방법이다. <code class=\"language-text\">@Configuration</code> 어노테이션으로 설정 클래스를 명시한다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringConfig</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Bean</span> \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SomeService</span> <span class=\"token function\">someService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 의존성을 가진 객체를 Bean으로 등록</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeService</span><span class=\"token punctuation\">(</span><span class=\"token function\">otherService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Bean</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">OtherService</span> <span class=\"token function\">otherService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OtherService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SomeService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherService <span class=\"token operator\">=</span> otherService<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"component\" style=\"position:relative;\"><a href=\"#component\" aria-label=\"component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a><code class=\"language-text\">@Component</code></h2>\n<p>또는 Spring에서 제공하는 컴포넌트 스캔을 이용하여 별도의 설정 클래스를 작성하지 않고 런타임에 직접 Bean 객체를 수집하도록 만들 수 있다.</p>\n<p><code class=\"language-text\">@Component</code> 어노테이션을 사용하여 Bena 객체임을 명시한다.</p>\n<p><code class=\"language-text\">@Controller</code>, <code class=\"language-text\">@Service</code>, <code class=\"language-text\">@Repository</code> 등 <code class=\"language-text\">@Component</code>를 상속한 다른 어노테이션 또한 동일하게 Bean 객체로 수집된다.</p>\n\n          <div class=\"gatsby-remark-prismjs-copy-button-container\">\n            <div class=\"gatsby-remark-prismjs-copy-button\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" onclick=\"gatsbyRemarkCopyToClipboard(this, this.parentNode.nextElementSibling)\">\n              Copy\n            </div>\n          </div>\n          \n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SomeService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OtherService</span> otherService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// OtherService라는 의존성을 갖기 때문에 </span>\n    <span class=\"token comment\">// 생성 시기에 객체를 주입받도록 @Autowired를 사용</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>otherService <span class=\"token operator\">=</span> otherService<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OtherService</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"24-2-21 Spring Dependency Injection","date":"February 21, 2024","description":null,"tags":["TIL","spring"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#dip\">DIP</a></p>\n</li>\n<li>\n<p><a href=\"#dependency-injection\">Dependency Injection</a></p>\n<ul>\n<li><a href=\"#constructor-based-injection\">Constructor-based Injection</a></li>\n<li><a href=\"#setter-based-injection\">Setter-based Injection</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spring-bean-%EB%93%B1%EB%A1%9D\">Spring Bean 등록</a></p>\n<ul>\n<li><a href=\"#configuration--bean\"><code class=\"language-text\">@Configuration</code> &#x26; <code class=\"language-text\">@Bean</code></a></li>\n<li><a href=\"#component\"><code class=\"language-text\">@Component</code></a></li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/til/24-2-14-Spring-Security-JWTAuthenticationFilter/"},"frontmatter":{"title":"24-2-14 Spring Security JWTAuthenticationFilter","date":"February 14, 2024"}},"next":{"fields":{"slug":"/posts/집-공유기로-미니-PC의-WSL에-서버-올리기/"},"frontmatter":{"title":"집 공유기로 미니 PC의 WSL에 서버 올리기","date":"June 03, 2024"}}},"pageContext":{"id":"b8da71c8-9a12-569c-b112-4da3aed2d8e4","previousPostId":"38cfce23-4eb1-5002-88e8-bedc27c41d58","nextPostId":"835f3890-dc85-52b9-a2d1-f8a343b42de8"}},"staticQueryHashes":["1846574571","230163734","3589320610"],"slicesMap":{}}