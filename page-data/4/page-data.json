{"componentChunkName":"component---src-templates-pagination-js","path":"/4/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"allMarkdownRemark":{"nodes":[{"excerpt":"동기 인터페이스에 기본 메서드를 구현한 다음 그 인터페이스를 구현하는 클래스에서 기본 메서드를 호출하려고 하니 에러가 생겼다. 에러 메시지는 이렇다. /tmp/C2ywkFh53T.cs(27,11): error CS1061: 'HelloWorld.B…","fields":{"slug":"/csharp/interface에-구현한-메서드를-클래스에서-접근할-수-없는-이유/"},"frontmatter":{"date":"August 22, 2023","title":"interface에 구현한 메서드를 클래스에서 접근할 수 없는 이유","description":null,"tags":["csharp"]}},{"excerpt":"Array 는 정적인 크기를 가지는 1차원 배열이다. 처럼 고정된 크기를 갖는 배열을 의미한다. 몇 가지 유용한 도구 메서드들이 클래스에 구현되어 있지만 사용자가 직접  클래스를 상속하여 다른 모습의 배열을 만들 수는 없다. 시작 인덱스는…","fields":{"slug":"/csharp/Array와-List/"},"frontmatter":{"date":"August 21, 2023","title":"Array와 List","description":null,"tags":["csharp"]}},{"excerpt":"의도 객체 구조를 이루는 원소에 대해 수행할 연산을 표현한다. 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있다. UML  방문자(Visitor) 인터페이스는 객체 즉, Element…","fields":{"slug":"/design-patterns/방문자-패턴/"},"frontmatter":{"date":"August 17, 2023","title":"방문자 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 알고리즘의 뼈대만 정의하고 각 단계에서 수행할 구체적 처리는 서브 클래스 쪽으로 미룬다. 서브 클래스에서 알고리즘의 각 단계를 재정의하여 구현한다. UML  AbstractClass…","fields":{"slug":"/design-patterns/템플릿-메서드-패턴/"},"frontmatter":{"date":"August 15, 2023","title":"템플릿 메서드 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 동일 계열의 알고리즘 군을 정의하고, 각 알고리즘을 캡슐화하며, 이들을 상호교환이 가능하도록 만든다. 알고리즘을 사용하는 클라이언트와 상관없이 독립적으로 변경할 수 있도록 한다. UML  알고리즘(Strategy…","fields":{"slug":"/design-patterns/전략-패턴/"},"frontmatter":{"date":"August 14, 2023","title":"전략 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"암시적 형변환 암시적 형변환은 여러 상황에서 일어난다. 대표적으로 function member invocation…","fields":{"slug":"/csharp/Csharp의-형변환/"},"frontmatter":{"date":"August 10, 2023","title":"Csharp의 형변환","description":null,"tags":["csharp"]}},{"excerpt":"Boxing…","fields":{"slug":"/csharp/Boxing과-Unboxing/"},"frontmatter":{"date":"August 10, 2023","title":"Boxing과 Unboxing","description":null,"tags":["csharp"]}},{"excerpt":"의도 객체의 내부 상태에 따라 행동을 변경한다. 이 때 객체가 자신의 클래스를 변경하는 것처럼 보이게 된다. UML  객체(Context)는 구체적인 상태를 갖기 위해 어떤 상태(State) 추상 클래스를 상속한 객체를 참조한다. State…","fields":{"slug":"/design-patterns/상태-패턴/"},"frontmatter":{"date":"August 09, 2023","title":"상태 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 객체 사이에 일 대 다 관계를 정의하여 어떤 객체의 상태가 변했을 때 모든 객체가 자동으로 그 변화를 통지받아 갱신되도록 만든다. UML  Subject는 여러 Observer…","fields":{"slug":"/design-patterns/옵저버-패턴/"},"frontmatter":{"date":"August 08, 2023","title":"옵저버 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 캡슐화를 위배하지 않으면서 어떤 객체의 내부 상태를 잡아내고 실체화시켜두어 나중에 객체가 저장해둔 상태로 되돌아오도록 한다. UML  Originator…","fields":{"slug":"/design-patterns/메멘토-패턴/"},"frontmatter":{"date":"August 07, 2023","title":"메멘토 패턴","description":null,"tags":["design-pattern"]}}]}},"pageContext":{"limit":10,"skip":30,"currentPage":4,"numPagination":5,"paginationPageCount":7}},"staticQueryHashes":["1846574571","230163734","3589320610"],"slicesMap":{}}